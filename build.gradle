ext.vendor = "rewinside.tv"
ext.log4jVersion = "2.7"

buildscript {
	repositories {
		mavenCentral()
		jcenter()

		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
		classpath 'org.ajoberstar:gradle-git:1.6.0'
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
	}
}

if (!project.hasProperty("gitCommitHash") && !JavaVersion.current().java6) {
	try {
		def Grgit = Class.forName("org.ajoberstar.grgit.Grgit");
		def Grgit_open = Grgit.getDeclaredMethod("open", File.class)
		def repo = Grgit_open.invoke(null, project.file('.'))
		ext.gitCommitHash = repo.head().abbreviatedId
	} catch (Exception ex) {
		println "Error getting commit hash: " + ex.getMessage()
	}
}

if (!project.hasProperty("gitCommitHash")) {
	ext.gitCommitHash = "no_git_id"
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'checkstyle'
	apply plugin: 'com.github.johnrengelman.shadow'
	
	group = 'tv.rewinside.rewimod'
	checkstyle.configFile = rootProject.file("config/checkstyle/checkstyle.xml")
	checkstyle.configProperties = ['basedir': "$rootDir"]
	
	checkstyle {
		toolVersion = "7.0"
	}
	
	repositories {
		mavenCentral()
	}
	
	dependencies {
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: rootProject.ext.log4jVersion
		compile 'org.projectlombok:lombok:1.16.12'
	}
	
	compileJava {
		options.encoding = 'UTF-8'
		options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
	}

	compileTestJava {
		options.encoding = 'UTF-8'
		options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
	}
	
	task printHeader {
		doFirst {
			def line = "\n=~=~=~=~=~=~=~=~ RewiMod =~=~=~=~=~=~=~=~=\n"
			println "${line}     ${project.name} v${project.version} ${line}";
		}
	}
	compileJava.dependsOn printHeader
	
	if (name.startsWith("RewiMod-Forge")) {
		apply plugin: 'net.minecraftforge.gradle.forge'
		
		checkstyle.configFile = rootProject.file("config/checkstyle/checkstyle_forge.xml")
		
		dependencies {
			compile project(":RewiMod-Core")
		}

		deobfCompileDummyTask.dependsOn printHeader
		
		task copyMcmod {
			doLast {
				copy {
					from "../RewiMod-Core/build/resources/main/mcmod.info"
					into project.buildDir.getPath() + "/resources"
				}
			}
		}
		
		build.dependsOn(copyMcmod)
				
		task copyCoreAssets {
			doLast {
				copy {
					from "../RewiMod-Core/build/resources/main/assets"
					into "build/classes/main/assets"
				}
				
				copy {
					from "../RewiMod-Core/build/resources/main/mcmod.info"
					into "build/classes/main/assets"
				}
			}
		}
		
		task run(dependsOn: classes, type: JavaExec) {
			main = 'GradleStart'
			debug = run.debug
			classpath = sourceSets.main.runtimeClasspath
			classpath.add(files(project.buildDir.getPath() + "/classes/main"))
			standardInput = System.in

			workingDir = '../run'
			file(workingDir).mkdirs()

			if (project.hasProperty("mcAccountName") && project.hasProperty("mcAccountPass") && project.hasProperty("useAuth") && project.useAuth.equals("true")) {
				args = ["--info", "--username", project.mcAccountName, "--password", project.mcAccountPass]
			}
		}
		run.dependsOn copyCoreAssets
		run.debug = false

		task debug() {
			doLast {
				run.debug = true
				sourceSets {
					main {
						output.resourcesDir = "build/classes/main"
					}
				}
			}
		}
		debug.finalizedBy run
		
		afterEvaluate { project -> 
			processResources {
				// this will ensure that this task is redone when the versions change.
				inputs.property "version", project.version
				inputs.property "mcversion", project.minecraft.version
				
				// replace stuff in mcmod.info, nothing else
				from(project.buildDir.getPath() + "/resources") {
					include 'mcmod.info'
						
					// replace version and mcversion
					expand 'version':project.version, 'mcversion':project.minecraft.version
				}
					
				// copy everything else, thats not the mcmod.info
				from(sourceSets.main.resources.srcDirs) {
					exclude 'mcmod.info'
				}
			}
			
			processResources.dependsOn(copyMcmod)
			
			shadowJar {
				dependencies {
					include(dependency("org.apache.logging.log4j:log4j-api:${rootProject.ext.log4jVersion}"))
					include(dependency("org.apache.logging.log4j:log4j-core:${rootProject.ext.log4jVersion}"))
					include(dependency(":RewiMod-Core"))
				}
				
				archiveName = "${project.jar.archiveName}";
			}
			shadowJar.finalizedBy reobfJar
			build.dependsOn(shadowJar)
			
			task signJar(type: SignJar, dependsOn: reobfJar) {
				if(project.hasProperty('keyStore')) {
					keyStore = project.keyStore
					alias = project.keyStoreAlias
					storePass = project.keyStorePass
					keyPass = project.keyStoreKeyPass
					inputFile = jar.archivePath
					outputFile = jar.archivePath
				}
			}
			signJar.onlyIf { project.hasProperty('keyStore') }
			build.dependsOn(signJar)
		}
	} else if (name.equals("RewiMod-Core")) {
		task javadocJar(type: Jar, dependsOn: javadoc) {
			classifier = 'javadoc'
			from javadoc.destinationDir
		}
		
		build.dependsOn(javadocJar)
	}
	
	build.dependsOn(checkstyleMain)
	build.dependsOn(checkstyleTest)
	
	afterEvaluate { project ->
		project.jar.archiveName = "${project.name}-${project.version}.jar"
		
		sourceCompatibility = 1.8
		targetCompatibility = 1.8

		jar {
			manifest {
				attributes(
					"Specification-Title": rootProject.name,
					"Specification-Version": project.ext.simpleVersion,
					"Specification-Vendor": rootProject.ext.vendor,
					"Implementation-Title": project.name,
					"Implementation-Version": rootProject.ext.gitCommitHash,
					"Implementation-Vendor": rootProject.ext.vendor
				)
			}
		}
	}
}
